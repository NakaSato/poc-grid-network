version: '3.8'

services:
  # Thai Energy Trading Blockchain Application
  thai-energy-blockchain:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: thai-energy-blockchain
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://thai_energy:${DB_PASSWORD}@postgres:5432/thai_energy_db
      - REDIS_URL=redis://redis:6379
      - BLOCKCHAIN_NETWORK=production
      - CONSENSUS_ALGORITHM=proof_of_authority
      - BLOCK_TIME=30
      - VALIDATOR_ROTATION_INTERVAL=15
      - MAX_VALIDATORS=5
      - AUTHORITY_THRESHOLD=3
      - MAX_BLOCK_SIZE=1048576
      - MEMPOOL_SIZE=10000
    ports:
      - "8080:8080"   # HTTP API
      - "9091:9090"   # Metrics (avoiding conflict with Prometheus)
      - "9944:9944"   # WebSocket
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config:/app/config:ro
      - blockchain_data:/app/data
      - logs:/app/logs
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD", "./thai-energy-trading-blockchain", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: thai-energy-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=thai_energy_db
      - POSTGRES_USER=thai_energy
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thai_energy -d thai_energy_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: thai-energy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: thai-energy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - thai-energy-blockchain
    networks:
      - thai-energy-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: thai-energy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - thai-energy-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: thai-energy-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - thai-energy-network

volumes:
  postgres_data:
  redis_data:
  blockchain_data:
  prometheus_data:
  grafana_data:
  logs:

networks:
  thai-energy-network:
    driver: bridge
